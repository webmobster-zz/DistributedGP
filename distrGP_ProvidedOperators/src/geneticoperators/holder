	pub fn grow_new_subtree(&mut self,operatorpointers: &Vec<Operator>,end_operators: &Vec<u32>,index: usize, targetsize: usize)
	{

		//THIS DOESNT CLEAN UP FREE NODES
		let operator_count = Range::new(0, operatorpointers.len());

		//fast but bad
	   	let mut rng = rand::weak_rng();


		//intial node
		let operator = operatorpointers[operator_count.ind_sample(&mut rng)].clone();

		let new_node = Node(operator, -1,-1,-1);

		self.list[index]=new_node;

		let mut loose_ends = Vec::new();

		loose_ends.push(index);



		//Grow behaviour comes from here
		loop
		{	



			while self.list.len() < targetsize
			{


				//no further succesors possible
				if loose_ends.len() == 0
				{
					break;
				}



				//deep behaviour
			

				//get loose end
				let working_index = loose_ends.pop().unwrap();
			

				let node = self.list[working_index].clone();

				let Node(op,_,_,_) = node;

				let end = self.list.len();
			
				if op.sucessors ==3
				{
					panic!("unimplemented feature");

				}
				
				else if op.sucessors ==2
				{
					//replace unlinked node with node with links
					self.list[working_index] = Node(op,end as isize,(end +1) as isize,-1);

					//add new node with unfilled sucessors to the ends
					self.add_to_end_node(operatorpointers[operator_count.ind_sample(&mut rng)].clone());
					self.add_to_end_node(operatorpointers[operator_count.ind_sample(&mut rng)].clone());

				}
				else if op.sucessors ==1
				{

					self.list[working_index] = Node(op,end as isize,-1,-1);

					//add new node with unfilled sucessors to the ends
					self.add_to_end_node(operatorpointers[operator_count.ind_sample(&mut rng)].clone());

				}
				else if op.sucessors ==0
				{
					
					//do nothing, as the Node should have unconnected sucessors already
					//hopefully this will get compiled away, usefull for code readability sakes


				}



			}


			//CLEAR UP DANGLING NODES
			

			//no further succesors possible
			if loose_ends.len() == 0
			{

				break;
			}


			let end_operator_count = Range::new(0, end_operators.len());
			
			//get a random index from the end operator list, which is used to get an operator from the operator list
			//SAME OPERATOR EVERY TIME FIX THIS!
			let operator = operatorpointers[end_operators[end_operator_count.ind_sample(&mut rng)] as usize].clone();

			let working_index = loose_ends.pop().unwrap();
			
			let node = self.list[working_index].clone();

			let Node(op,_,_,_) = node;

			let end = self.list.len();

			if op.sucessors ==3
			{
				panic!("unimplemented feature");

			}
			
			else if op.sucessors ==2
			{
				//replace unlinked node with node with links
				self.list[working_index] = Node(op,end as isize,(end +1) as isize,-1);

				//add new node with unfilled sucessors to the ends
				self.add_to_end_node(operator.clone());
				self.add_to_end_node(operator.clone());

			}
			else if op.sucessors ==1
			{
				//replace unlinked node with node with link
				self.list[working_index] = Node(op,end as isize,-1,-1);

				//add new node with unfilled sucessors to the ends
				self.add_to_end_node(operator);

			}
			else if op.sucessors ==0
			{

				//do nothing, as the Node should have unconnected sucessors already
				//hopefully this will get compiled away, usefull for code readability sakes



			}

		}





	}


	//Havent checked this at all, just used a modified version of the replace subtree code
	//The method of 1000 off by 1 errors
	pub fn clean(&mut self)
	{
		let mut unfinished_nodes = VecDeque::new();

		let mut index_map: HashMap<isize,isize> = HashMap::new();


		let start_get=0;
		let start_replace=0;

		//possibly more efficient way to do this
		index_map.insert(start_get as isize,start_replace as isize);

		unfinished_nodes.push_back((start_get as isize,start_replace as isize));
		

		//probably best not to write to the same data structure we are reading
		let old = self.clone();

		

		//keeps track of allocated positions

		*self = Graph::empty_graph(old.fitness,old.life);


		//increment by one cause position 0 is needs to be allocated to the first node
		let mut last_used_position = self.list.len() as isize +1;

		while !unfinished_nodes.is_empty()
		{



			let (current_get_index,current_put_index)= match unfinished_nodes.pop_front()
			{
				Some(x) => x,
				None => panic!("should never happen"),

			};



			//does the current node exist, or is it getting put on the end
			let increase_graph_size;
			

			//should only occur in loops?
			if current_put_index< (self.list.len() as isize)
			{
				//panic!("loop");
				increase_graph_size=false;
			}
			else if(self.list.len() as isize) ==current_put_index
			{

				increase_graph_size=true;
				//last_used_position = last_used_position +1;
			}
			else
			{
				panic!("error in logic somewhere");
			}





			//make sure wrapping is accounted for
			//removed wrapping 4 testing purposes  % old.list.len()
			let mut current_node =old.list[(current_get_index as usize) % old.list.len() ].clone();
			



			let Node(op, suc1,suc2,_) = current_node.clone();


		

			//THE END LOGIC should be fixed
			if op.sucessors ==3
			{
				panic!("unimplemented feature");

			}
			else if op.sucessors ==2
			{
				

					//problem seems to be here suc1s sucessorts will pop before suc2 does
					if !index_map.contains_key(&suc1) && !index_map.contains_key(&suc2)
					{
						//panic!("unimplemented feature");

						current_node = Node(op,last_used_position,(last_used_position +1),-1);
						
						
						
						index_map.insert(suc1,last_used_position);
						unfinished_nodes.push_back((suc1,last_used_position));
						last_used_position = last_used_position +1;


						index_map.insert(suc2,last_used_position);
						unfinished_nodes.push_back((suc2,last_used_position));
						last_used_position = last_used_position +1;

					}
					//handle loops
					else if index_map.contains_key(&suc1) && index_map.contains_key(&suc2)
					{
						//panic!("loop");
						current_node = Node(op,*index_map.get(&suc1).unwrap(),*index_map.get(&suc2).unwrap(),-1);

	
					}
					else if index_map.contains_key(&suc1)
					{
						//panic!("loop");
						current_node = Node(op,*index_map.get(&suc1).unwrap(),last_used_position,-1);
						
						index_map.insert(suc2,last_used_position);
						unfinished_nodes.push_back((suc2,last_used_position));
						last_used_position = last_used_position +1;

					}
					else
					{
						//panic!("loop");
						current_node = Node(op,last_used_position,*index_map.get(&suc2).unwrap(),-1);

						index_map.insert(suc1,last_used_position);
						unfinished_nodes.push_back((suc1,last_used_position));
						last_used_position = last_used_position +1;

					}
				


			}
			else if op.sucessors ==1
			{
					if !index_map.contains_key(&suc1)
					{


						current_node = Node(op,last_used_position,-1,-1);

						index_map.insert(suc1,last_used_position);
						unfinished_nodes.push_back((suc1,last_used_position));
						last_used_position = last_used_position +1;
					}
					else
					{
						//panic!("loop");
						current_node = Node(op,*index_map.get(&suc1).unwrap(),-1,-1);

					}
				


			}
			else if op.sucessors ==0
			{





			}


			//replace or grow the list
			if !increase_graph_size
			{
				self.list[current_put_index as usize]=current_node.clone();
			}
			else
			{

				self.list.push(current_node.clone());
			}

			//println!("working end");



		}


}


pub fn replace_subtree(&mut self,start_replace :usize,start_get: usize, graph: &Graph)
{
		let mut unfinished_nodes = VecDeque::new();

		let mut index_map: HashMap<isize,isize> = HashMap::new();



		//possibly more efficient way to do this
		index_map.insert(start_get as isize,start_replace as isize);

		unfinished_nodes.push_back((start_get as isize,start_replace as isize));
		




		//increment by one cause position 0 is needs to be allocated to the first node
		let mut last_used_position = self.list.len() as isize;

		while !unfinished_nodes.is_empty()
		{



			let (current_get_index,current_put_index)= match unfinished_nodes.pop_front()
			{
				Some(x) => x,
				None => panic!("should never happen"),

			};



			//does the current node exist, or is it getting put on the end
			let increase_graph_size;
			

			//should only occur in loops?
			if current_put_index< (self.list.len() as isize)
			{
				//panic!("loop");
				increase_graph_size=false;
			}
			else if(self.list.len() as isize) ==current_put_index
			{

				increase_graph_size=true;
				//last_used_position = last_used_position +1;
			}
			else
			{
				panic!("error in logic somewhere");
			}





			//make sure wrapping is accounted for
			//removed wrapping 4 testing purposes  % old.list.len()
			let mut current_node =graph.list[(current_get_index as usize) % graph.list.len()].clone();
			



			let Node(op, suc1,suc2,_) = current_node.clone();


		

			//THE END LOGIC should be fixed
			if op.sucessors ==3
			{
				panic!("unimplemented feature");

			}
			else if op.sucessors ==2
			{
				

					//problem seems to be here suc1s sucessorts will pop before suc2 does
					if !index_map.contains_key(&suc1) && !index_map.contains_key(&suc2)
					{
						//panic!("unimplemented feature");

						current_node = Node(op,last_used_position,(last_used_position +1),-1);
						
						
						
						index_map.insert(suc1,last_used_position);
						unfinished_nodes.push_back((suc1,last_used_position));
						last_used_position = last_used_position +1;


						index_map.insert(suc2,last_used_position);
						unfinished_nodes.push_back((suc2,last_used_position));
						last_used_position = last_used_position +1;

					}
					//handle loops
					else if index_map.contains_key(&suc1) && index_map.contains_key(&suc2)
					{
						//panic!("loop");
						current_node = Node(op,*index_map.get(&suc1).unwrap(),*index_map.get(&suc2).unwrap(),-1);

	
					}
					else if index_map.contains_key(&suc1)
					{
						//panic!("loop");
						current_node = Node(op,*index_map.get(&suc1).unwrap(),last_used_position,-1);
						
						index_map.insert(suc2,last_used_position);
						unfinished_nodes.push_back((suc2,last_used_position));
						last_used_position = last_used_position +1;

					}
					else
					{
						//panic!("loop");
						current_node = Node(op,last_used_position,*index_map.get(&suc2).unwrap(),-1);

						index_map.insert(suc1,last_used_position);
						unfinished_nodes.push_back((suc1,last_used_position));
						last_used_position = last_used_position +1;

					}
				


			}
			else if op.sucessors ==1
			{
					if !index_map.contains_key(&suc1)
					{


						current_node = Node(op,last_used_position,-1,-1);

						index_map.insert(suc1,last_used_position);
						unfinished_nodes.push_back((suc1,last_used_position));
						last_used_position = last_used_position +1;
					}
					else
					{
						//panic!("loop");
						current_node = Node(op,*index_map.get(&suc1).unwrap(),-1,-1);

					}
				


			}
			else if op.sucessors ==0
			{





			}


			//replace or grow the list
			if !increase_graph_size
			{
				self.list[current_put_index as usize]=current_node.clone();
			}
			else
			{

				self.list.push(current_node.clone());
			}

			//println!("working end");

		


		}


}

	pub fn replace_slice(&mut self,start :usize, slice: &[Node])
	{

		let mut x=start;
		for i in 0 .. slice.len()
		{	

			x = x +1;

			if  x < self.list.len()
			{
				self.list[x]=slice[i].clone();
			}
			else if self.list.len() ==x
			{

				self.list.push(slice[i].clone());
			}
			else
			{
				panic!("error in logic somewhere");
			}

		}



	}
